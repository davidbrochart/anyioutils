{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Anyioutils is a set of utility classes and functions that make working with AnyIO a little bit easier. In particular, developers coming from asyncio will find it more familiar. If AnyIO wants to bring Trio's semantics to asyncio, anyioutils wants to bring asyncio's semantics back to AnyIO. For instance, you will find the equivalent of a Future or a Task.</p>"},{"location":"api_reference/","title":"API reference","text":"<p>Utility classes and functions for AnyIO.</p>"},{"location":"api_reference/#anyioutils.CancelledError","title":"<code>CancelledError</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>The operation has been cancelled.</p>"},{"location":"api_reference/#anyioutils.Event","title":"<code>Event</code>","text":"<p>An event object. Not thread-safe.</p> <p>An event can be used to notify multiple tasks that some event has happened.</p> <p>An Event object manages an internal flag that can be set to <code>True</code> with the set() method and reset to <code>False</code> with the clear() method. The wait() method blocks until the flag is set to <code>True</code>. The flag is set to <code>False</code> initially.</p>"},{"location":"api_reference/#anyioutils.Event.clear","title":"<code>clear()</code>","text":"<p>Clear (unset) the event.</p> <p>Tasks awaiting on wait() will now block until the set() method is called again.</p>"},{"location":"api_reference/#anyioutils.Event.is_set","title":"<code>is_set()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the event is set.</p>"},{"location":"api_reference/#anyioutils.Event.set","title":"<code>set()</code>","text":"<p>Set the event.</p> <p>All tasks waiting for event to be set will be immediately awakened.</p>"},{"location":"api_reference/#anyioutils.Event.wait","title":"<code>wait()</code>  <code>async</code>","text":"<p>Wait until the event is set.</p> <p>Returns:</p> Type Description <code>bool</code> <p>If the event is set, return <code>True</code> immediately. Otherwise block until another task calls set().</p>"},{"location":"api_reference/#anyioutils.Future","title":"<code>Future</code>","text":"<p>               Bases: <code>Generic[T]</code></p> <p>A Future represents an eventual result of an asynchronous operation. Not thread-safe.</p> <p>Future is an awaitable object. Coroutines can await on Future objects until they either have a result or an exception set, or until they are cancelled. A Future can be awaited multiple times and the result is same.</p> <p>Typically Futures are used to enable low-level callback-based code to interoperate with high-level async/await code.</p>"},{"location":"api_reference/#anyioutils.Future.add_done_callback","title":"<code>add_done_callback(callback)</code>","text":"<p>Add a callback to be run when the Future is done.</p> <p>The callback is called with the Future object as its only argument.</p> <p>If the Future is already done when this method is called, the callback is scheduled immediately.</p>"},{"location":"api_reference/#anyioutils.Future.cancel","title":"<code>cancel(raise_exception=False)</code>","text":"<p>Cancel the Future and schedule callbacks.</p> <p>If the Future is already done or cancelled, return <code>False</code>. Otherwise, change the Future's state to cancelled, schedule the callbacks, and return <code>True</code>.</p> <p>Parameters:</p> Name Type Description Default <code>raise_exception</code> <code>bool</code> <p>Whether to raise a CancelledError.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>False</code> if the Future is already done or cancelled, <code>True</code> otherwise.</p>"},{"location":"api_reference/#anyioutils.Future.cancelled","title":"<code>cancelled()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the Future was cancelled, <code>False</code> otherwise.</p>"},{"location":"api_reference/#anyioutils.Future.done","title":"<code>done()</code>","text":"<p>A Future is done if it was cancelled or if it has a result or an exception set with set_result() or set_exception() calls.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the Future is done.</p>"},{"location":"api_reference/#anyioutils.Future.exception","title":"<code>exception()</code>","text":"<p>The exception (or <code>None</code> if no exception was set) is returned only if the Future is done.</p> <p>If the Future has been cancelled, this method raises a CancelledError exception.</p> <p>If the Future isn\u2019t done yet, this method raises an InvalidStateError exception.</p> <p>Returns:</p> Type Description <code>BaseException | None</code> <p>The exception that was set on this Future.</p>"},{"location":"api_reference/#anyioutils.Future.remove_done_callback","title":"<code>remove_done_callback(callback)</code>","text":"<p>Remove callback from the callbacks list.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of callbacks removed, which is typically 1, unless a callback was added more than once.</p>"},{"location":"api_reference/#anyioutils.Future.result","title":"<code>result()</code>","text":"<p>If the Future is done and has a result set by the set_result() method, the result value is returned.</p> <p>If the Future is done and has an exception set by the set_exception() method, this method raises the exception.</p> <p>If the Future has been cancelled, this method raises a CancelledError exception.</p> <p>If the Future\u2019s result isn\u2019t yet available, this method raises an InvalidStateError exception.</p> <p>Returns:</p> Type Description <code>T</code> <p>The result of the Future.</p>"},{"location":"api_reference/#anyioutils.Future.set_exception","title":"<code>set_exception(value)</code>","text":"<p>Mark the Future as done and set an exception.</p> <p>Raises:</p> Type Description <code>InvalidStateError</code> <p>The Future is already done.</p>"},{"location":"api_reference/#anyioutils.Future.set_result","title":"<code>set_result(value)</code>","text":"<p>Mark the Future as done and set its result.</p> <p>Raises:</p> Type Description <code>InvalidStateError</code> <p>The Future is already done.</p>"},{"location":"api_reference/#anyioutils.Future.wait","title":"<code>wait()</code>  <code>async</code>","text":"<p>Wait for the Future to be done or cancelled.</p> <p>Returns:</p> Type Description <code>T | None</code> <p>The Furure's return value.</p>"},{"location":"api_reference/#anyioutils.InvalidStateError","title":"<code>InvalidStateError</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Invalid internal state of Task or Future.</p> <p>Can be raised in situations like setting a result value for a Future object that already has a result value set.</p>"},{"location":"api_reference/#anyioutils.Monitor","title":"<code>Monitor</code>","text":""},{"location":"api_reference/#anyioutils.Monitor.result","title":"<code>result</code>  <code>property</code>","text":"<p>The result of the measurement (greater than <code>1</code>). The closer to <code>1</code>, the less saturated the event-loop is. The greater, the more saturated the event-loop is.</p>"},{"location":"api_reference/#anyioutils.Monitor.__init__","title":"<code>__init__(period=0.01)</code>","text":"<p>Create a Monitor with a run() method that runs a task in the background and measures how saturated the event-loop is. This can also be used to detect (long) blocking calls in the event-loop.</p> <p>The Monitor can be used as an async context manager, in which case it will automatically run, or by launching its run() method in the backgroup manually.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>float</code> <p>The period in seconds to make the measurement.</p> <code>0.01</code>"},{"location":"api_reference/#anyioutils.Monitor.run","title":"<code>run()</code>  <code>async</code>","text":"<p>Run the Monitor. This has to be run in the background.</p>"},{"location":"api_reference/#anyioutils.Queue","title":"<code>Queue</code>","text":"<p>               Bases: <code>Generic[T]</code></p>"},{"location":"api_reference/#anyioutils.Queue.maxsize","title":"<code>maxsize</code>  <code>property</code>","text":"<p>Number of items allowed in the queue.</p>"},{"location":"api_reference/#anyioutils.Queue.__init__","title":"<code>__init__(maxsize=0)</code>","text":"<p>A first in, first out (FIFO) queue.</p> <p>If maxsize is less than or equal to zero, the queue size is infinite. If it is an integer greater than <code>0</code>, then <code>await put()</code> blocks when the queue reaches maxsize until an item is removed by get().</p>"},{"location":"api_reference/#anyioutils.Queue.empty","title":"<code>empty()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the queue is empty, <code>False</code> otherwise.</p>"},{"location":"api_reference/#anyioutils.Queue.full","title":"<code>full()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if there are maxsize items in the queue.</p>"},{"location":"api_reference/#anyioutils.Queue.get","title":"<code>get()</code>  <code>async</code>","text":"<p>Remove and return an item from the queue. If queue is empty, wait until an item is available.</p> <p>Returns:</p> Type Description <code>T</code> <p>The item from the queue.</p>"},{"location":"api_reference/#anyioutils.Queue.get_nowait","title":"<code>get_nowait()</code>","text":"<p>Returns:</p> Type Description <code>T</code> <p>An item if one is immediately available.</p>"},{"location":"api_reference/#anyioutils.Queue.put","title":"<code>put(item)</code>  <code>async</code>","text":"<p>Put an item into the queue. If the queue is full, wait until a free slot is available before adding the item.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>T</code> <p>The item to put into the queue.</p> required"},{"location":"api_reference/#anyioutils.Queue.put_nowait","title":"<code>put_nowait(item)</code>","text":"<p>Put an item into the queue without blocking.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>T</code> <p>The item to put into the queue.</p> required"},{"location":"api_reference/#anyioutils.Queue.qsize","title":"<code>qsize()</code>","text":"<p>Returns:</p> Type Description <code>int</code> <p>The number of items in the queue.</p>"},{"location":"api_reference/#anyioutils.Task","title":"<code>Task</code>","text":"<p>               Bases: <code>Generic[T]</code></p> <p>A Future-like object that runs a Python coroutine. Not thread-safe.</p> <p>Tasks are used to run coroutines in event loops. If a coroutine awaits on a Future, the Task suspends the execution of the coroutine and waits for the completion of the Future. When the Future is done, the execution of the wrapped coroutine resumes.</p> <p>Event loops use cooperative scheduling: an event loop runs one Task at a time. While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations.</p> <p>Use the high-level anyioutils.create_task() function to create Tasks. Manual instantiation of Tasks is discouraged.</p> <p>To cancel a running Task use the cancel() method. Calling it will cause the Task to throw a CancelledError exception into the wrapped coroutine. If a coroutine is awaiting on a Future object during cancellation, the Future object will be cancelled.</p> <p>cancelled() can be used to check if the Task was cancelled.</p>"},{"location":"api_reference/#anyioutils.Task.add_done_callback","title":"<code>add_done_callback(callback)</code>","text":"<p>Add a callback to be run when the Task is done.</p> <p>This method should only be used in low-level callback-based code.</p> <p>See the documentation of Future.add_done_callback() for more details.</p>"},{"location":"api_reference/#anyioutils.Task.cancel","title":"<code>cancel(raise_exception=False)</code>","text":"<p>Request the Task to be cancelled.</p>"},{"location":"api_reference/#anyioutils.Task.cancelled","title":"<code>cancelled()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the Task is cancelled.</p>"},{"location":"api_reference/#anyioutils.Task.done","title":"<code>done()</code>","text":"<p>A Task is done when the wrapped coroutine either returned a value, raised an exception, or the Task was cancelled.</p> Return <p><code>True</code> if the Task is done.</p>"},{"location":"api_reference/#anyioutils.Task.exception","title":"<code>exception()</code>","text":"<p>If the wrapped coroutine raised an exception that exception is returned. If the wrapped coroutine returned normally this method returns <code>None</code>.</p> <p>If the Task has been cancelled, this method raises a CancelledError exception.</p> <p>If the Task isn't done yet, this method raises an InvalidStateError exception.</p> <p>Returns:</p> Type Description <code>BaseException | None</code> <p>The exception of the Task.</p>"},{"location":"api_reference/#anyioutils.Task.remove_done_callback","title":"<code>remove_done_callback(callback)</code>","text":"<p>Remove callback from the callbacks list.</p> <p>This method should only be used in low-level callback-based code.</p> <p>See the documentation of Future.remove_done_callback() for more details.</p>"},{"location":"api_reference/#anyioutils.Task.result","title":"<code>result()</code>","text":"<p>If the Task is done, the result of the wrapped coroutine is returned (or if the coroutine raised an exception, that exception is re-raised).</p> <p>If the Task has been cancelled, this method raises a CancelledError exception.</p> <p>If the Task's result is't yet available, this method raises an InvalidStateError exception.</p> Return <p>The result of the Task.</p>"},{"location":"api_reference/#anyioutils.Task.wait","title":"<code>wait()</code>  <code>async</code>","text":"<p>Wait for the Task to be done or cancelled.</p> <p>Returns:</p> Type Description <code>T | None</code> <p>The return value of the coroutine, if not cancelled, otherwise <code>None</code>.</p>"},{"location":"api_reference/#anyioutils.Task.wait_started","title":"<code>wait_started()</code>  <code>async</code>","text":"<p>Wait for the task to be started. The task must have been created with start_task(), not create_task.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The started value.</p>"},{"location":"api_reference/#anyioutils.TaskGroup","title":"<code>TaskGroup</code>","text":"<p>An asynchronous context manager holding a group of tasks. Tasks can be added to the group using create_task(). All tasks are awaited when the context manager exits.</p> <p>Tasks created down the call stack using create_task() or start_task() may not need to be passed a TaskGroup, since they could use this TaskGroup implicitly.</p>"},{"location":"api_reference/#anyioutils.TaskGroup.cancel_scope","title":"<code>cancel_scope</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>CancelScope</code> <p>The TaskGroup's CancelScope.</p>"},{"location":"api_reference/#anyioutils.TaskGroup.create_task","title":"<code>create_task(coro, *, name=None)</code>","text":"<p>Create a task in this task group.</p> <p>Returns:</p> Type Description <code>Task[T]</code> <p>The created Task.</p>"},{"location":"api_reference/#anyioutils.create_task","title":"<code>create_task(coro, task_group=None, *, name=None)</code>","text":"<p>Wrap the coro coroutine into a Task and schedule its execution.</p> <p>Parameters:</p> Name Type Description Default <code>task_group</code> <code>TaskGroup | None</code> <p>An optional TaskGroup (from AnyIO) to run the Task in. If not provided, a TaskGroup (from <code>anyioutils</code>) will be looked up the call stack and used if found.</p> <code>None</code> <p>Returns:</p> Type Description <code>Task[T]</code> <p>The Task object.</p>"},{"location":"api_reference/#anyioutils.start_guest_run","title":"<code>start_guest_run(async_fn, *, run_sync_soon_threadsafe, done_callback, run_sync_soon_not_threadsafe=None, backend='asyncio')</code>","text":"<p>See Trio's guest mode.</p>"},{"location":"api_reference/#anyioutils.start_task","title":"<code>start_task(async_fn, task_group=None, *, name=None)</code>","text":"<p>Create a coroutine from the async_fn async function, wrap it into a Task and schedule its execution.</p> <p>The Task's wait() method will only return <code>None</code>, but its wait_started() method will return its started value.</p> <p>Parameters:</p> Name Type Description Default <code>task_group</code> <code>TaskGroup | None</code> <p>An optional TaskGroup (from AnyIO) to run the Task in. If not provided, a TaskGroup (from <code>anyioutils</code>) will be looked up the call stack and used, if found.</p> <code>None</code> <p>Returns:</p> Type Description <code>Task[None]</code> <p>The Task object.</p>"},{"location":"api_reference/#anyioutils.wait","title":"<code>wait(aws, task_group=None, *, timeout=None, return_when=ALL_COMPLETED)</code>  <code>async</code>","text":"<p>Run Future and Task instances in the aws iterable concurrently and block until the condition specified by <code>return_when</code>.</p> <p>return_when indicates when this function should return. It must be one of the following constants:</p> Constant Description anyioutils.FIRST_COMPLETED The function will return when any future finishes or is cancelled. anyioutils.FIRST_EXCEPTION The function will return when any future finishes by raising an exception. If no future raises an exception then it is equivalent to [<code>ALL_COMPLETED</code>. anyioutils.ALL_COMPLETED The function will return when all futures finish or are cancelled. <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float | int | None</code> <p>If specified, can be used to control the maximum number of seconds to wait before returning. Note that this function does not raise TimeoutError. Futures or Tasks that aren't done when the timeout occurs are simply returned in the second set.</p> <code>None</code> <code>return_when</code> <code>Literal['ALL_COMPLETED', 'FIRST_COMPLETED', 'FIRST_EXCEPTION']</code> <p>Indicates when this function should return. It must be one of the following constants:</p> <code>ALL_COMPLETED</code> <p>Returns:</p> Type Description <code>tuple[set[Task | Future], set[Task | Future]]</code> <p>Two sets of Tasks/Futures: <code>(done, pending)</code>.</p>"},{"location":"install/","title":"Install","text":"<p>Anyioutils can be installed through PyPI or conda-forge.</p>"},{"location":"install/#with-pip","title":"With <code>pip</code>","text":"<pre><code>pip install anyioutils\n</code></pre>"},{"location":"install/#with-micromamba","title":"With <code>micromamba</code>","text":"<p>We recommend using <code>micromamba</code> to manage <code>conda-forge</code> environments (see <code>micromamba</code>'s installation instructions). First create an environment, here called <code>my-env</code>, and activate it: <pre><code>micromamba create -n my-env\nmicromamba activate my-env\n</code></pre> Then install <code>anyioutils</code>.</p> <pre><code>micromamba install anyioutils\n</code></pre>"},{"location":"install/#development-install","title":"Development install","text":"<p>You first need to clone the repository: <pre><code>git clone https://github.com/davidbrochart/anyioutils\ncd anyioutils\n</code></pre> We recommend working in a conda environment. In order to build <code>anyioutils</code>, you will need <code>pip</code>: <pre><code>micromamba create -n anyioutils-dev\nmicromamba activate anyioutils-dev\nmicromamba install pip\n</code></pre> Then install <code>anyioutils</code> in editable mode: <pre><code>pip install -e \".[test,docs]\"\n</code></pre></p>"}]}